import fs from 'fs';
import path from 'path';
import graphConfig from '../../../config/graph';
import {
  root,
} from '../../utils/path';
import {
  prettyPrint,
} from '../../utils/format';
import {
  errorLog,
} from '../../utils/log';
import {
  ensureDirectory,
} from '../../utils/fs';

const clientBuildDest = path.join(root, './client/src/build');
const clientConfigPath = path.join(root, './client/src/build/config.js');

const constructEndpoints = (network) => {
  const {
    name,
    githubUser,
  } = graphConfig;
  let host = '';
  switch (network) {
    case 'development':
      host = '127.0.0.1';
      break;
    default:
  }

  if (!host) {
    return {};
  }

  return {
    graphQLHttpServer: `http://${host}:8000/subgraphs/name/${githubUser}/${name}`,
    graphQLWebSocketServer: `ws://${host}:8001/subgraphs/name/${githubUser}/${name}`,
  };
};

export default function copyConfigForClient() {
  return new Promise((resolve) => {
    try {
      const config = {
        networks: {
          development: {
            ...constructEndpoints('development'),
          },
        },
      };
      const clientConfigs = [
        '// Automatically generated by task/copy',
        `export default ${prettyPrint(config).join('\n')};`,
      ];
      ensureDirectory(clientBuildDest);

      fs.writeFile(clientConfigPath, clientConfigs.join('\n'), (error) => {
        if (error) {
          errorLog(`Cannot write to file ${clientConfigPath}`);
        }
        resolve({
          src: '',
          dest: clientConfigPath,
          error,
        });
      });
    } catch (error) {
      errorLog(error);
    }

    resolve({
      src: 'GraphQL Endpoints',
      dest: clientConfigPath,
      error: null,
    });
  });
}
